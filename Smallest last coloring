#include <iostream>
#include <map>
#include <iomanip>
#include <stack>
#include <vector>
#include <GLUT/GLUT.h>
#include <cstdlib>
#include <math.h>
#include <ctime>
using namespace std;
typedef std::map<int,int> mp;
typedef struct Node{
    double xloc;
    double yloc;
    int degree;
    int index;
    int color=0;
}Node;
bool is_contain(vector<Node *> &list, vector<int> &colorlist){//this function is used to determine if two vertice connected through adjancency list and degree list
    for (int i=0; i<list.size(); i++) {
        for (int j=1; j<colorlist.size(); j++) {
            if (list[i]->index==colorlist[j]) {
                return true;
            }
        }
    }
    return false;
}
void sort_and_color(vector<vector<Node *>> &node){
    map<int, vector<Node *>> adjacency_list;
    for (int i=0; i<node.size(); i++) {//construct adjacency list in map
        int index=node[i][0]->index;
        Node *p=node[i][0];
        node[i].erase(node[i].begin()+0);
        adjacency_list[index]=node[i];
        node[i].insert(node[i].begin()+0, p);
    }
    int max_degree=0;
    for (int i=0; i<node.size(); i++) {//find the largest degree in order to construct degree list
        if (node[i][0]->degree>max_degree) {
            max_degree=node[i][0]->degree;
        }
    }
    vector<vector<int>> degree_list;
    stack<int> sequence;//using stack to store the deleted vertex
    for (int i=0; i<=max_degree; i++) {//construct degree list
        vector<int> temp;
        temp.push_back(i);
        for (int j=0; j<node.size(); j++) {
            if (node[j][0]->degree==i) {
                temp.push_back(node[j][0]->index);
            }
        }
        degree_list.push_back(temp);
    }
    for (int i=0; i<degree_list.size(); i++) {//find the delete sequence
        if (degree_list[i].size()>1) {
            int number_to_delete=degree_list[i][1];
            sequence.push(degree_list[i][1]);
            degree_list[i].erase(degree_list[i].begin()+1);
            for (int k=0; k<adjacency_list[number_to_delete].size(); k++) {
                int degree=adjacency_list[number_to_delete][k]->degree;
                int index=adjacency_list[number_to_delete][k]->index;
                for (int z=1; z<degree_list[degree].size(); z++) {
                    if (degree_list[degree][z]==index) {
                        degree_list[degree-1].push_back(index);
                        degree_list[degree].erase(degree_list[degree].begin()+z);
                        break;
                    }
                }
            }
            i=-1;
        }
    }
    stack<int> sequence1=sequence;
    cout<<endl;
    vector<vector<int>> color_list;
    for (int i=0; i<200; i++) {//initiate color list
        vector<int> temp;
        temp.push_back(i);
        color_list.push_back(temp);
    }
    while (!sequence.empty()) {//coloring process, color one from the stack and pop one
        int node_to_color=sequence.top();
        sequence.pop();
        for (int i=0; i<color_list.size();i++) {
            if (color_list[i].size()<2) {
                color_list[i].push_back(node_to_color);
                break;
            }
            else {
                if (is_contain(adjacency_list[node_to_color], color_list[i])) {
                    continue;
                }
                else{
                    color_list[i].push_back(node_to_color);
                    break;
                }
            }
        }
    }
}
