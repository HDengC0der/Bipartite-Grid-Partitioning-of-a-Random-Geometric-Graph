#include <iostream>
#include <map>
#include <iomanip>
#include <stack>
#include <vector>
#include <GLUT/GLUT.h>
#include <cstdlib>
#include <math.h>
#include <ctime>
using namespace std;
typedef std::map<int,int> mp;
typedef struct Node{
    double xloc;
    double yloc;
    int degree;
    int index;
    int color=0;
}Node;
void mySphereDisplay(){
    clock_t startTime,endTime;
    int v=400;
    int avg_degree=64;
    double r=sqrt(avg_degree/v);
    vector<vector<double>> vec;
    vector<int> degree;
    glClear(GL_COLOR_BUFFER_BIT);
    startTime=clock();
    
    glPointSize(2.0f);
    glBegin(GL_POINTS);
    while (vec.size()<v) {
        double x=rand()/double(RAND_MAX);
        double y=rand()/double(RAND_MAX);
        x=x-0.5;
        y=y-0.5;
        if (pow(x, 2)+pow(y, 2)<=pow(r, 2)) {
            double z=rand()/double(RAND_MAX);
            z=z-0.5;
            if (z>0) {
                z=sqrt(pow(r, 2)-pow(x, 2)-pow(y, 2));
            }
            if (z<0) {
                z=-sqrt(pow(r, 2)-pow(x, 2)-pow(y, 2));
            }
            vector<double> vec1;
            vec1.push_back(x);
            vec1.push_back(y);
            vec1.push_back(z);
            vec.push_back(vec1);
            glVertex3d(x, y, z);
        }
    }
    glEnd();
    sort(vec.begin(), vec.end());
    glBegin(GL_LINES);
    for (int i=0; i<v; i++) {
        int j=i-1;
        int k=i+1;
        int d=0;
        while (j>=0&&vec[i][0]-vec[j][0]<=r) {
            if (pow(vec[i][0]-vec[j][0], 2)+pow(vec[i][1]-vec[j][1], 2)+pow(vec[i][2]-vec[j][2], 2)<=pow(r, 2)) {
                glColor3d(0.0, 1.0, 0.0);
                glVertex3d(vec[i][0], vec[i][1], vec[i][2]);
                glVertex3d(vec[j][0], vec[j][1], vec[j][2]);
                d+=1;
            }
            j--;
        }
        while (k<v&&vec[k][0]-vec[i][0]<=r) {
            if (pow(vec[i][0]-vec[k][0], 2)+pow(vec[i][1]-vec[k][1], 2)+pow(vec[i][2]-vec[k][2], 2)<=pow(r, 2)) {
                glColor3d(0.0, 1.0, 0.0);
                glVertex3d(vec[i][0], vec[i][1], vec[i][2]);
                glVertex3d(vec[k][0], vec[k][1], vec[k][2]);
                d+=1;
            }
            k++;
        }
        degree.push_back(d);
    }
    glEnd();
    endTime=clock();
    glFlush();
    sort(degree.begin(), degree.end());
    int sum=0;
    for (int i=0; i<v; i++) {
        sum+=degree[i];
    }
    cout<<"Total time : "<<(double)(endTime-startTime)/CLOCKS_PER_SEC<<"s"<<endl;
    cout<<"Total degree is : "<<sum<<endl;
    cout<<"The min degree is : "<<degree[0]<<endl;
    cout<<"The max degree is : "<<degree[v-1]<<endl;
}
